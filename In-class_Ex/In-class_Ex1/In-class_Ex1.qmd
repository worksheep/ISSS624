---
#note --- above this is the start of the yaml line
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
date: "18 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  #echo will run all code chunk
  eval: true
  #
  warning: false
  #warning messages not displayed
editor: visual
#by default, nowadays no need, but the prof use it as standard practice
#note --- below this is the end of the yaml
---

```{r}
options(max.print=1000000)
```

## Getting Started

The code chunk below load the following packages:

\- tmap : for thematic mapping\
- sf : for geospatial data handling\
- tidyverse: for non-spatial data handling

```{r}
pacman::p_load(tmap, sf, tidyverse)

# note : this is the R code for quatero, usually in R, we would have use library(tamp) etc
#pacman:: call the package. then p_load is a function within pacman
```

## Importing Geospatial Data

### Importing the Boundaries

The Masterplan 2014 Subzone Boundary is a shapefile that need to be imported. It will cut singapore into different subzones

i recall prof was saying we should project to Singapore 3414. but either code seem to work? i think it is depending on which code i put in first. if i swap these 2 code around. it doesn't seem to work. MP2019 shapefile is still in WGS84 (degree) instead of SVY21 (meters)

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MPSZ-2019")
```

```{r}
#| eval: false

mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>% st_transform(crs = 3414)

#WGS84 SVY21
#CRS coordinate representation system for Singapore is 3414
```

### Importing the cycling path

this is different from the earlier where this is SVY21

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

I think i get it, the difference is base on the original file. So for WGS84 or SVY21, it is due to the shape file's original coordinate system? I don't recall so though.

### Importing Preschool Location

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

the main diff is this is KML file instead of shapefile. but seems like i can still use st_read, just that for this i don't need to specify dsn and layer.

## Importing Aspatial Data

### Initial Import

We are getting all the airbnb listing in

```{r}
listings <- read_csv("data/aspatial/listings.csv")
list(listings) 
```

### Converting Aspatial to Spatial

the lat long has been converted to a geometry

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)

glimpse(listings_sf)
```

## Doing Some Initial Play with the Data

### DataTable

```{r}
st_geometry(mpsz)
```

```{r}
glimpse(mpsz)
```

```{r}
head(mpsz, n=5)
```

### Plotting a Map

```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Changing the Projection

First we need to check the data

```{r}
st_crs(mpsz)
```

actually after checking i saw that prof used another command to change the projection . What is the difference between st_set_crs and st_transform. from what is googled, st_set_crs just update the metadata but doesn't change the coordinates itself

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

```{r}
mpsz3414 <- st_transform(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
st_crs(preschool3414)
```

## The Scenarios:

### Scenario 1

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

### Scenario 1 Solution:

Question: what is the difference between PLANNING_A and PLANNING_1. but given that PLANNING_A is all NA, why is showing in the plot for buffer but not for the cycling path itself?

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
glimpse(buffer_cycling)
```

```{r}
plot(cyclingpath)
```

```{r}
plot(buffer_cycling)
```

calculating the buffer area i.e. convert geometry into area then summing it up

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

### Scenario 2

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

### Scenario 2 Solution:

#### Calculate number of Preschool in PZ

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

#### Calulating the density of pre-school by planning subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()

mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

top_n(mpsz3414, 10, `PreSch Density`)

```

#### Exploring the Data

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are a couple of planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

## BELOW ARE NOT FOR THIS EX

### Preparing the Flow Data

#### Importing the OD data

First, we will import the Passenger Volume by Origin Destination Bus Stops dataset downloaded from LTA DataMall by using read_csv() of readr package

```{r}
#| eval: false
odbus <- read.csv("data/aspatial/origin_destination_bus_202308.csv")
```

```{r}
#| eval: false
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting the study data

For the purpose of this exercise, we will extract commuting flows on weekday and between 7 and 9 o'clock

```{r}
#| eval: false

origtrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS= sum(TOTAL_TRIPS))

#for beginners, we may not want to use pipe %>%, we can chop up the code into individual blocks, to understand the output step by step

```

```{r}
#| eval: false

busstop <- st_read(dsn = "data/geospatial", layer="BusStop") %>% st_transform(crs = 3414)

# dsn is data geospatial

mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>% st_transform(crs = 3414)

#WGS84 SVY21
#CRS coordinate representation system for Singapore is 3414
```
