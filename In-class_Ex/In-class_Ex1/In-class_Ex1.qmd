---
#note --- above this is the start of the yaml line
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
date: "18 November 2023"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  #echo will run all code chunk
  eval: true
  #
  warning: false
  #warning messages not displayed
editor: visual
#by default, nowadays no need, but the prof use it as standard practice
#note --- below this is the end of the yaml

---
```{r}
options(max.print=1000000)
```

## Getting Started

The code chunk below load the following packages:

\- tmap : for thematic mapping\
- sf : for geospatial data handling\
- tidyverse: for non-spatial data handling

```{r}
pacman::p_load(tmap, sf, tidyverse)

# note : this is the R code for quatero, usually in R, we would have use library(tamp) etc
#pacman:: call the package. then p_load is a function within pacman
```

## Importing Geospatial Data

### Importing the Boundaries
The Masterplan 2014 Subzone Boundary is a shapefile that need to be imported. It will cut singapore into different subzones

i recall prof was saying we should project to Singapore 3414. but either code seem to work?

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MPSZ-2019")
```

```{r}
#| eval: false

mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>% st_transform(crs = 3414)

#WGS84 SVY21
#CRS coordinate representation system for Singapore is 3414
```
### Importing the cycling path

this is different from the earlier where this is SVY21

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```
I think i get it, the difference is base on the original file. So for WGS84 or SVY21, it is due to the shape file's original coordinate system? I don't recall so though.

### Importing Preschool Location

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

the main diff is this is KML file instead of shapefile. but seems like i can still use st_read, just that for this i don't need to specify dsn and layer.

## Doing Some Initial Play with the Data

### DataTable
```{r}
st_geometry(mpsz)
```

```{r}
glimpse(mpsz)
```

```{r}
head(mpsz, n=5)
```

### Plotting a Map

```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

## Changing the Projection

First we need to check the data
```{r}
st_crs(mpsz)
```

actually after checking i saw that prof used another command to change the projection . What is the difference between st_set_crs and st_transform. from what is googled, st_set_crs just update the metadata but doesn't change the coordinates itself

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz)
```



### Preparing the Flow Data

#### Importing the OD data

First, we will import the Passenger Volume by Origin Destination Bus Stops dataset downloaded from LTA DataMall by using read_csv() of readr package

```{r}
#| eval: false
odbus <- read.csv("data/aspatial/origin_destination_bus_202308.csv")
```

```{r}
#| eval: false
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting the study data

For the purpose of this exercise, we will extract commuting flows on weekday and between 7 and 9 o'clock

```{r}
#| eval: false

origtrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS= sum(TOTAL_TRIPS))

#for beginners, we may not want to use pipe %>%, we can chop up the code into individual blocks, to understand the output step by step

```

```{r}
#| eval: false

busstop <- st_read(dsn = "data/geospatial", layer="BusStop") %>% st_transform(crs = 3414)

# dsn is data geospatial

mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>% st_transform(crs = 3414)

#WGS84 SVY21
#CRS coordinate representation system for Singapore is 3414
```

## Working with

For the purpose of this exercise
